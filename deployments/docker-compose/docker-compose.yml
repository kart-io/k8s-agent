version: '3.8'

services:
  # PostgreSQL - 主数据库
  postgres:
    image: postgres:14-alpine
    container_name: aetherius-postgres
    environment:
      POSTGRES_USER: aetherius
      POSTGRES_PASSWORD: aetherius_pass
      POSTGRES_DB: aetherius
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - aetherius
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aetherius"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - 缓存
  redis:
    image: redis:7-alpine
    container_name: aetherius-redis
    command: redis-server --requirepass redis_pass
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - aetherius
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # NATS - 消息队列
  nats:
    image: nats:2.10-alpine
    container_name: aetherius-nats
    command: ["-js", "-m", "8222"]
    ports:
      - "4222:4222"  # Client
      - "8222:8222"  # Monitoring
      - "6222:6222"  # Cluster
    networks:
      - aetherius
    healthcheck:
      test: ["CMD", "wget", "-q", "-O-", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Neo4j - 知识图谱
  neo4j:
    image: neo4j:5-community
    container_name: aetherius-neo4j
    environment:
      NEO4J_AUTH: neo4j/neo4j_pass
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_memory_heap_max__size: 2G
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - aetherius
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "neo4j_pass", "RETURN 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  # Agent Manager
  agent-manager:
    build:
      context: ../../agent-manager
      dockerfile: Dockerfile
    container_name: aetherius-agent-manager
    environment:
      - NATS_URL=nats://nats:4222
      - DATABASE_URL=postgres://aetherius:aetherius_pass@postgres:5432/aetherius?sslmode=disable
      - REDIS_URL=redis://:redis_pass@redis:6379/0
      - SERVER_PORT=8080
      - LOG_LEVEL=info
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - aetherius
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "-O-", "http://localhost:8080/health"]
      interval: 15s
      timeout: 5s
      retries: 3

  # Orchestrator Service
  orchestrator-service:
    build:
      context: ../../orchestrator-service
      dockerfile: Dockerfile
    container_name: aetherius-orchestrator
    environment:
      - NATS_URL=nats://nats:4222
      - DATABASE_URL=postgres://aetherius:aetherius_pass@postgres:5432/aetherius?sslmode=disable
      - REDIS_URL=redis://:redis_pass@redis:6379/1
      - AGENT_MANAGER_URL=http://agent-manager:8080
      - REASONING_SERVICE_URL=http://reasoning-service:8082
      - SERVER_PORT=8081
      - LOG_LEVEL=info
    ports:
      - "8081:8081"
    depends_on:
      agent-manager:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - aetherius
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "-O-", "http://localhost:8081/health"]
      interval: 15s
      timeout: 5s
      retries: 3

  # Reasoning Service
  reasoning-service:
    build:
      context: ../../reasoning-service
      dockerfile: Dockerfile
    container_name: aetherius-reasoning
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=neo4j_pass
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8082
      - LOG_LEVEL=INFO
    ports:
      - "8082:8082"
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - aetherius
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8082/health')"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 60s

networks:
  aetherius:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  neo4j_data:
  neo4j_logs: