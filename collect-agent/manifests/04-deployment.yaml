apiVersion: apps/v1
kind: Deployment
metadata:
  name: aetherius-agent
  namespace: aetherius-agent
  labels:
    app.kubernetes.io/name: aetherius-agent
    app.kubernetes.io/component: agent
    app.kubernetes.io/version: v1.0.0
spec:
  replicas: 1
  strategy:
    type: Recreate  # Only one agent per cluster
  selector:
    matchLabels:
      app.kubernetes.io/name: aetherius-agent
      app.kubernetes.io/component: agent
  template:
    metadata:
      labels:
        app.kubernetes.io/name: aetherius-agent
        app.kubernetes.io/component: agent
        app.kubernetes.io/version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: aetherius-agent
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534  # nobody user
        runAsGroup: 65534
        fsGroup: 65534
      containers:
      - name: agent
        image: aetherius/collect-agent:v1.0.0  # This will be built
        imagePullPolicy: IfNotPresent
        args:
        - --config=/etc/aetherius/config.yaml
        - --health-port=8080
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        # Override cluster_id from ConfigMap if provided
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: agent-config
              key: cluster_id
              optional: true
        # Override central_endpoint from ConfigMap
        - name: CENTRAL_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: agent-config
              key: central_endpoint
              optional: true
        # Override log_level from ConfigMap
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: agent-config
              key: log_level
              optional: true
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        volumeMounts:
        - name: config
          mountPath: /etc/aetherius
          readOnly: true
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "256Mi"
            cpu: "250m"
            ephemeral-storage: "2Gi"
        livenessProbe:
          httpGet:
            path: /health/live
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config
        configMap:
          name: agent-config
          defaultMode: 0644
      - name: tmp
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-role.kubernetes.io/control-plane
                operator: DoesNotExist
      tolerations:
      # Allow scheduling on all nodes including master nodes if needed
      - effect: NoSchedule
        operator: Exists
      - effect: NoExecute
        operator: Exists